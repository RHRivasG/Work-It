// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TrainingAPIClient is the client API for TrainingAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrainingAPIClient interface {
	Save(ctx context.Context, in *TrainingCreated, opts ...grpc.CallOption) (*Response, error)
	Update(ctx context.Context, in *TrainingUpdated, opts ...grpc.CallOption) (*Response, error)
	Delete(ctx context.Context, in *TrainingDeleted, opts ...grpc.CallOption) (*Response, error)
	SaveVideo(ctx context.Context, in *TrainingVideoCreated, opts ...grpc.CallOption) (*Response, error)
	DeleteVideo(ctx context.Context, in *TrainingVideoDeleted, opts ...grpc.CallOption) (*Response, error)
	DeleteByTrainer(ctx context.Context, in *TrainerDeleted, opts ...grpc.CallOption) (*Response, error)
}

type trainingAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewTrainingAPIClient(cc grpc.ClientConnInterface) TrainingAPIClient {
	return &trainingAPIClient{cc}
}

func (c *trainingAPIClient) Save(ctx context.Context, in *TrainingCreated, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/main.trainingAPI/Save", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingAPIClient) Update(ctx context.Context, in *TrainingUpdated, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/main.trainingAPI/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingAPIClient) Delete(ctx context.Context, in *TrainingDeleted, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/main.trainingAPI/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingAPIClient) SaveVideo(ctx context.Context, in *TrainingVideoCreated, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/main.trainingAPI/SaveVideo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingAPIClient) DeleteVideo(ctx context.Context, in *TrainingVideoDeleted, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/main.trainingAPI/DeleteVideo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingAPIClient) DeleteByTrainer(ctx context.Context, in *TrainerDeleted, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/main.trainingAPI/DeleteByTrainer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrainingAPIServer is the server API for TrainingAPI service.
// All implementations must embed UnimplementedTrainingAPIServer
// for forward compatibility
type TrainingAPIServer interface {
	Save(context.Context, *TrainingCreated) (*Response, error)
	Update(context.Context, *TrainingUpdated) (*Response, error)
	Delete(context.Context, *TrainingDeleted) (*Response, error)
	SaveVideo(context.Context, *TrainingVideoCreated) (*Response, error)
	DeleteVideo(context.Context, *TrainingVideoDeleted) (*Response, error)
	DeleteByTrainer(context.Context, *TrainerDeleted) (*Response, error)
	mustEmbedUnimplementedTrainingAPIServer()
}

// UnimplementedTrainingAPIServer must be embedded to have forward compatible implementations.
type UnimplementedTrainingAPIServer struct {
}

func (UnimplementedTrainingAPIServer) Save(context.Context, *TrainingCreated) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (UnimplementedTrainingAPIServer) Update(context.Context, *TrainingUpdated) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedTrainingAPIServer) Delete(context.Context, *TrainingDeleted) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedTrainingAPIServer) SaveVideo(context.Context, *TrainingVideoCreated) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveVideo not implemented")
}
func (UnimplementedTrainingAPIServer) DeleteVideo(context.Context, *TrainingVideoDeleted) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVideo not implemented")
}
func (UnimplementedTrainingAPIServer) DeleteByTrainer(context.Context, *TrainerDeleted) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteByTrainer not implemented")
}
func (UnimplementedTrainingAPIServer) mustEmbedUnimplementedTrainingAPIServer() {}

// UnsafeTrainingAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrainingAPIServer will
// result in compilation errors.
type UnsafeTrainingAPIServer interface {
	mustEmbedUnimplementedTrainingAPIServer()
}

func RegisterTrainingAPIServer(s grpc.ServiceRegistrar, srv TrainingAPIServer) {
	s.RegisterService(&TrainingAPI_ServiceDesc, srv)
}

func _TrainingAPI_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrainingCreated)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingAPIServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.trainingAPI/Save",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingAPIServer).Save(ctx, req.(*TrainingCreated))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainingAPI_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrainingUpdated)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingAPIServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.trainingAPI/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingAPIServer).Update(ctx, req.(*TrainingUpdated))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainingAPI_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrainingDeleted)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingAPIServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.trainingAPI/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingAPIServer).Delete(ctx, req.(*TrainingDeleted))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainingAPI_SaveVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrainingVideoCreated)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingAPIServer).SaveVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.trainingAPI/SaveVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingAPIServer).SaveVideo(ctx, req.(*TrainingVideoCreated))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainingAPI_DeleteVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrainingVideoDeleted)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingAPIServer).DeleteVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.trainingAPI/DeleteVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingAPIServer).DeleteVideo(ctx, req.(*TrainingVideoDeleted))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainingAPI_DeleteByTrainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrainerDeleted)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingAPIServer).DeleteByTrainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.trainingAPI/DeleteByTrainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingAPIServer).DeleteByTrainer(ctx, req.(*TrainerDeleted))
	}
	return interceptor(ctx, in, info, handler)
}

// TrainingAPI_ServiceDesc is the grpc.ServiceDesc for TrainingAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrainingAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.trainingAPI",
	HandlerType: (*TrainingAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Save",
			Handler:    _TrainingAPI_Save_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _TrainingAPI_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _TrainingAPI_Delete_Handler,
		},
		{
			MethodName: "SaveVideo",
			Handler:    _TrainingAPI_SaveVideo_Handler,
		},
		{
			MethodName: "DeleteVideo",
			Handler:    _TrainingAPI_DeleteVideo_Handler,
		},
		{
			MethodName: "DeleteByTrainer",
			Handler:    _TrainingAPI_DeleteByTrainer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fitness.proto",
}

// RoutineAPIClient is the client API for RoutineAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoutineAPIClient interface {
	Save(ctx context.Context, in *RoutineCreated, opts ...grpc.CallOption) (*Response, error)
	Update(ctx context.Context, in *RoutineUpdated, opts ...grpc.CallOption) (*Response, error)
	Delete(ctx context.Context, in *RoutineDeleted, opts ...grpc.CallOption) (*Response, error)
	AddTraining(ctx context.Context, in *TrainingAdded, opts ...grpc.CallOption) (*Response, error)
	RemoveTraining(ctx context.Context, in *TrainingRemoved, opts ...grpc.CallOption) (*Response, error)
	DeleteByParticipant(ctx context.Context, in *ParticipantDeleted, opts ...grpc.CallOption) (*Response, error)
	ChangeParticipant(ctx context.Context, in *ParticipantChanged, opts ...grpc.CallOption) (*Response, error)
}

type routineAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewRoutineAPIClient(cc grpc.ClientConnInterface) RoutineAPIClient {
	return &routineAPIClient{cc}
}

func (c *routineAPIClient) Save(ctx context.Context, in *RoutineCreated, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/main.routineAPI/Save", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routineAPIClient) Update(ctx context.Context, in *RoutineUpdated, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/main.routineAPI/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routineAPIClient) Delete(ctx context.Context, in *RoutineDeleted, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/main.routineAPI/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routineAPIClient) AddTraining(ctx context.Context, in *TrainingAdded, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/main.routineAPI/AddTraining", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routineAPIClient) RemoveTraining(ctx context.Context, in *TrainingRemoved, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/main.routineAPI/RemoveTraining", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routineAPIClient) DeleteByParticipant(ctx context.Context, in *ParticipantDeleted, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/main.routineAPI/DeleteByParticipant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routineAPIClient) ChangeParticipant(ctx context.Context, in *ParticipantChanged, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/main.routineAPI/ChangeParticipant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoutineAPIServer is the server API for RoutineAPI service.
// All implementations must embed UnimplementedRoutineAPIServer
// for forward compatibility
type RoutineAPIServer interface {
	Save(context.Context, *RoutineCreated) (*Response, error)
	Update(context.Context, *RoutineUpdated) (*Response, error)
	Delete(context.Context, *RoutineDeleted) (*Response, error)
	AddTraining(context.Context, *TrainingAdded) (*Response, error)
	RemoveTraining(context.Context, *TrainingRemoved) (*Response, error)
	DeleteByParticipant(context.Context, *ParticipantDeleted) (*Response, error)
	ChangeParticipant(context.Context, *ParticipantChanged) (*Response, error)
	mustEmbedUnimplementedRoutineAPIServer()
}

// UnimplementedRoutineAPIServer must be embedded to have forward compatible implementations.
type UnimplementedRoutineAPIServer struct {
}

func (UnimplementedRoutineAPIServer) Save(context.Context, *RoutineCreated) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (UnimplementedRoutineAPIServer) Update(context.Context, *RoutineUpdated) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedRoutineAPIServer) Delete(context.Context, *RoutineDeleted) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedRoutineAPIServer) AddTraining(context.Context, *TrainingAdded) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTraining not implemented")
}
func (UnimplementedRoutineAPIServer) RemoveTraining(context.Context, *TrainingRemoved) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTraining not implemented")
}
func (UnimplementedRoutineAPIServer) DeleteByParticipant(context.Context, *ParticipantDeleted) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteByParticipant not implemented")
}
func (UnimplementedRoutineAPIServer) ChangeParticipant(context.Context, *ParticipantChanged) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeParticipant not implemented")
}
func (UnimplementedRoutineAPIServer) mustEmbedUnimplementedRoutineAPIServer() {}

// UnsafeRoutineAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoutineAPIServer will
// result in compilation errors.
type UnsafeRoutineAPIServer interface {
	mustEmbedUnimplementedRoutineAPIServer()
}

func RegisterRoutineAPIServer(s grpc.ServiceRegistrar, srv RoutineAPIServer) {
	s.RegisterService(&RoutineAPI_ServiceDesc, srv)
}

func _RoutineAPI_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoutineCreated)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutineAPIServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.routineAPI/Save",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutineAPIServer).Save(ctx, req.(*RoutineCreated))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutineAPI_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoutineUpdated)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutineAPIServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.routineAPI/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutineAPIServer).Update(ctx, req.(*RoutineUpdated))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutineAPI_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoutineDeleted)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutineAPIServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.routineAPI/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutineAPIServer).Delete(ctx, req.(*RoutineDeleted))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutineAPI_AddTraining_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrainingAdded)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutineAPIServer).AddTraining(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.routineAPI/AddTraining",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutineAPIServer).AddTraining(ctx, req.(*TrainingAdded))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutineAPI_RemoveTraining_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrainingRemoved)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutineAPIServer).RemoveTraining(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.routineAPI/RemoveTraining",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutineAPIServer).RemoveTraining(ctx, req.(*TrainingRemoved))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutineAPI_DeleteByParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParticipantDeleted)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutineAPIServer).DeleteByParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.routineAPI/DeleteByParticipant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutineAPIServer).DeleteByParticipant(ctx, req.(*ParticipantDeleted))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutineAPI_ChangeParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParticipantChanged)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutineAPIServer).ChangeParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.routineAPI/ChangeParticipant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutineAPIServer).ChangeParticipant(ctx, req.(*ParticipantChanged))
	}
	return interceptor(ctx, in, info, handler)
}

// RoutineAPI_ServiceDesc is the grpc.ServiceDesc for RoutineAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoutineAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.routineAPI",
	HandlerType: (*RoutineAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Save",
			Handler:    _RoutineAPI_Save_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _RoutineAPI_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _RoutineAPI_Delete_Handler,
		},
		{
			MethodName: "AddTraining",
			Handler:    _RoutineAPI_AddTraining_Handler,
		},
		{
			MethodName: "RemoveTraining",
			Handler:    _RoutineAPI_RemoveTraining_Handler,
		},
		{
			MethodName: "DeleteByParticipant",
			Handler:    _RoutineAPI_DeleteByParticipant_Handler,
		},
		{
			MethodName: "ChangeParticipant",
			Handler:    _RoutineAPI_ChangeParticipant_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fitness.proto",
}

// SummaryAPIClient is the client API for SummaryAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SummaryAPIClient interface {
	Save(ctx context.Context, in *SummaryCreated, opts ...grpc.CallOption) (*Response, error)
	Update(ctx context.Context, in *SummaryUpdated, opts ...grpc.CallOption) (*Response, error)
}

type summaryAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewSummaryAPIClient(cc grpc.ClientConnInterface) SummaryAPIClient {
	return &summaryAPIClient{cc}
}

func (c *summaryAPIClient) Save(ctx context.Context, in *SummaryCreated, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/main.summaryAPI/Save", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *summaryAPIClient) Update(ctx context.Context, in *SummaryUpdated, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/main.summaryAPI/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SummaryAPIServer is the server API for SummaryAPI service.
// All implementations must embed UnimplementedSummaryAPIServer
// for forward compatibility
type SummaryAPIServer interface {
	Save(context.Context, *SummaryCreated) (*Response, error)
	Update(context.Context, *SummaryUpdated) (*Response, error)
	mustEmbedUnimplementedSummaryAPIServer()
}

// UnimplementedSummaryAPIServer must be embedded to have forward compatible implementations.
type UnimplementedSummaryAPIServer struct {
}

func (UnimplementedSummaryAPIServer) Save(context.Context, *SummaryCreated) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (UnimplementedSummaryAPIServer) Update(context.Context, *SummaryUpdated) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedSummaryAPIServer) mustEmbedUnimplementedSummaryAPIServer() {}

// UnsafeSummaryAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SummaryAPIServer will
// result in compilation errors.
type UnsafeSummaryAPIServer interface {
	mustEmbedUnimplementedSummaryAPIServer()
}

func RegisterSummaryAPIServer(s grpc.ServiceRegistrar, srv SummaryAPIServer) {
	s.RegisterService(&SummaryAPI_ServiceDesc, srv)
}

func _SummaryAPI_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SummaryCreated)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummaryAPIServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.summaryAPI/Save",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummaryAPIServer).Save(ctx, req.(*SummaryCreated))
	}
	return interceptor(ctx, in, info, handler)
}

func _SummaryAPI_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SummaryUpdated)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummaryAPIServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.summaryAPI/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummaryAPIServer).Update(ctx, req.(*SummaryUpdated))
	}
	return interceptor(ctx, in, info, handler)
}

// SummaryAPI_ServiceDesc is the grpc.ServiceDesc for SummaryAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SummaryAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.summaryAPI",
	HandlerType: (*SummaryAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Save",
			Handler:    _SummaryAPI_Save_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _SummaryAPI_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fitness.proto",
}
